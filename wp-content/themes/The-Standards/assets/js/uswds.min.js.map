{"version":3,"sources":["uswds.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","arr","fn","self","filter","TypeError","ret","hasOwn","val","push","Object","prototype","hasOwnProperty","2","ary","callback","thisArg","forEach","3","window","document","createElement","createElementNS","view","classListProp","protoProp","elemCtrProto","Element","objCtr","strTrim","String","trim","this","replace","arrIndexOf","Array","indexOf","item","len","DOMEx","type","message","name","DOMException","checkTokenAndGetIndex","classList","token","test","ClassList","elem","trimmedClasses","getAttribute","classes","split","_updateClassName","setAttribute","toString","classListProto","classListGetter","contains","add","tokens","arguments","updated","remove","index","splice","toggle","force","result","method","join","defineProperty","classListPropDesc","get","enumerable","configurable","ex","undefined","number","__defineGetter__","testElement","createMethod","original","DOMTokenList","_toggle","4","_typeof","Symbol","iterator","obj","constructor","definition","define","amd","_listener","fns","doc","hack","documentElement","doScroll","domContentLoaded","loaded","readyState","addEventListener","removeEventListener","shift","setTimeout","5","Boolean","dataset","aB","element","map","attributes","getter","value","setter","removeAttribute","j","attribute","prop","slice","charAt","toUpperCase","bind","set","6","ElementProto","matches","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","selector","elements","ownerDocument","querySelectorAll","closest","nodeType","parentNode","7","global","NAN","symbolTag","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","freeGlobal","freeSelf","root","Function","objectToString","nativeMax","Math","max","nativeMin","min","now","Date","isObject","isSymbol","toNumber","other","valueOf","isBinary","func","wait","options","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","args","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","debounced","isInvoking","cancel","clearTimeout","flush","8","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","assign","test1","getOwnPropertyNames","test2","fromCharCode","test3","letter","keys","err","shouldUseNative","target","source","from","symbols","to","toObject","key","9","delegate","delegateAll","DELEGATE_PATTERN","popKey","events","props","listeners","reduce","memo","handler","match","capture","passive","listener","_type","getListeners","concat","../delegate","../delegateAll","object-assign","10","functions","some","11","event","element-closest","12","compose","selectors","delegates","../compose","13","14","wrapped","currentTarget","15","RE_TRIM","RE_SPLIT","str","ids","getElementById","id","querySelector","el","16","_defineProperty","writable","behavior","isElementInViewport","CLICK","PREFIX","prefix","ACCORDION","BUTTON","EXPANDED","toggleButton","button","expanded","accordion","multiselectable","getAccordionButtons","showButton","hideButton","preventDefault","scrollIntoView","init","show","hide","getButtons","Accordion","on","off","../config","../events","../utils/behavior","../utils/is-in-viewport","../utils/toggle","array-filter","array-foreach","17","HEADER","EXPANDED_CLASS","18","debounce","select","HIDDEN","NAV","LIST","resize","hidden","innerWidth","list","lists","HIDE_MAX_WIDTH","DEBOUNCE_RATE","teardown","../utils/select","./accordion","lodash.debounce","19","banner","footer","navigation","password","search","skipnav","validator","./banner","./footer","./navigation","./password","./search","./skipnav","./validator","20","_CLICK","NAV_LINKS","OPENERS","CLOSE_BUTTON","CLOSERS","TOGGLES","ACTIVE_CLASS","isActive","body","focusTrap","toggleNav","active","enable","release","closeButton","menuButton","focus","activeElement","closer","getBoundingClientRect","width","acc","btn","trapContainer","focusableElements","firstTabStop","lastTabStop","trapTabKey","keyCode","shiftKey","_focusTrap","21","toggleFormInput","LINK","../utils/toggle-form-input","22","ignore","FORM","VISUALLY_HIDDEN","lastButton","toggleSearch","context","form","input","receptor/ignore","23","once","style","outline","receptor/once","24","validate","keyup change","input[data-validation-element]","../utils/validate-input","25","26","27","elproto","HTMLElement","hasAttribute","28","./element-hidden","classlist-polyfill","29","domready","uswds","components","./components","./config","./polyfills","30","Behavior","sequence","seq","_this","receptor/behavior","31","win","docEl","rect","top","left","bottom","innerHeight","clientHeight","right","clientWidth","32","selection","33","field","mask","34","resolveIdRefs","toggleFieldMask","PRESSED","SHOW_ATTR","pressed","fields","textContent","showText","hideText","./select","./toggle-field-mask","resolve-id-refs","35","controls","36","CHECKED_CLASS","data","validationElement","checkList","startsWith","validatorName","substr","toLowerCase","validatorPattern","RegExp","validatorSelector","validatorCheckbox","checked","elem-dataset"],"mappings":"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","file":"uswds.min.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){\n'use strict';\n\n/**\n * Array#filter.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object=} self\n * @return {Array}\n * @throw TypeError\n */\n\nmodule.exports = function (arr, fn, self) {\n  if (arr.filter) return arr.filter(fn, self);\n  if (void 0 === arr || null === arr) throw new TypeError();\n  if ('function' != typeof fn) throw new TypeError();\n  var ret = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (!hasOwn.call(arr, i)) continue;\n    var val = arr[i];\n    if (fn.call(self, val, i, arr)) ret.push(val);\n  }\n  return ret;\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n},{}],2:[function(require,module,exports){\n/**\n * array-foreach\n *   Array#forEach ponyfill for older browsers\n *   (Ponyfill: A polyfill that doesn't overwrite the native method)\n * \n * https://github.com/twada/array-foreach\n *\n * Copyright (c) 2015-2016 Takuto Wada\n * Licensed under the MIT license.\n *   https://github.com/twada/array-foreach/blob/master/MIT-LICENSE\n */\n'use strict';\n\nmodule.exports = function forEach(ary, callback, thisArg) {\n    if (ary.forEach) {\n        ary.forEach(callback, thisArg);\n        return;\n    }\n    for (var i = 0; i < ary.length; i += 1) {\n        callback.call(thisArg, ary[i], i, ary);\n    }\n};\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\n/*\n * classList.js: Cross-browser full element.classList implementation.\n * 1.1.20170427\n *\n * By Eli Grey, http://eligrey.com\n * License: Dedicated to the public domain.\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\nif (\"document\" in window.self) {\n\n\t// Full polyfill for browsers with no classList support\n\t// Including IE < Edge missing SVGElement.classList\n\tif (!(\"classList\" in document.createElement(\"_\")) || document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\"))) {\n\n\t\t(function (view) {\n\n\t\t\t\"use strict\";\n\n\t\t\tif (!('Element' in view)) return;\n\n\t\t\tvar classListProp = \"classList\",\n\t\t\t    protoProp = \"prototype\",\n\t\t\t    elemCtrProto = view.Element[protoProp],\n\t\t\t    objCtr = Object,\n\t\t\t    strTrim = String[protoProp].trim || function () {\n\t\t\t\treturn this.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t},\n\t\t\t    arrIndexOf = Array[protoProp].indexOf || function (item) {\n\t\t\t\tvar i = 0,\n\t\t\t\t    len = this.length;\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\tif (i in this && this[i] === item) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// Vendors: please allow content code to instantiate DOMExceptions\n\t\t\t,\n\t\t\t    DOMEx = function DOMEx(type, message) {\n\t\t\t\tthis.name = type;\n\t\t\t\tthis.code = DOMException[type];\n\t\t\t\tthis.message = message;\n\t\t\t},\n\t\t\t    checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {\n\t\t\t\tif (token === \"\") {\n\t\t\t\t\tthrow new DOMEx(\"SYNTAX_ERR\", \"An invalid or illegal string was specified\");\n\t\t\t\t}\n\t\t\t\tif (/\\s/.test(token)) {\n\t\t\t\t\tthrow new DOMEx(\"INVALID_CHARACTER_ERR\", \"String contains an invalid character\");\n\t\t\t\t}\n\t\t\t\treturn arrIndexOf.call(classList, token);\n\t\t\t},\n\t\t\t    ClassList = function ClassList(elem) {\n\t\t\t\tvar trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\"),\n\t\t\t\t    classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : [],\n\t\t\t\t    i = 0,\n\t\t\t\t    len = classes.length;\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\tthis.push(classes[i]);\n\t\t\t\t}\n\t\t\t\tthis._updateClassName = function () {\n\t\t\t\t\telem.setAttribute(\"class\", this.toString());\n\t\t\t\t};\n\t\t\t},\n\t\t\t    classListProto = ClassList[protoProp] = [],\n\t\t\t    classListGetter = function classListGetter() {\n\t\t\t\treturn new ClassList(this);\n\t\t\t};\n\t\t\t// Most DOMException implementations don't allow calling DOMException's toString()\n\t\t\t// on non-DOMExceptions. Error's toString() is sufficient here.\n\t\t\tDOMEx[protoProp] = Error[protoProp];\n\t\t\tclassListProto.item = function (i) {\n\t\t\t\treturn this[i] || null;\n\t\t\t};\n\t\t\tclassListProto.contains = function (token) {\n\t\t\t\ttoken += \"\";\n\t\t\t\treturn checkTokenAndGetIndex(this, token) !== -1;\n\t\t\t};\n\t\t\tclassListProto.add = function () {\n\t\t\t\tvar tokens = arguments,\n\t\t\t\t    i = 0,\n\t\t\t\t    l = tokens.length,\n\t\t\t\t    token,\n\t\t\t\t    updated = false;\n\t\t\t\tdo {\n\t\t\t\t\ttoken = tokens[i] + \"\";\n\t\t\t\t\tif (checkTokenAndGetIndex(this, token) === -1) {\n\t\t\t\t\t\tthis.push(token);\n\t\t\t\t\t\tupdated = true;\n\t\t\t\t\t}\n\t\t\t\t} while (++i < l);\n\n\t\t\t\tif (updated) {\n\t\t\t\t\tthis._updateClassName();\n\t\t\t\t}\n\t\t\t};\n\t\t\tclassListProto.remove = function () {\n\t\t\t\tvar tokens = arguments,\n\t\t\t\t    i = 0,\n\t\t\t\t    l = tokens.length,\n\t\t\t\t    token,\n\t\t\t\t    updated = false,\n\t\t\t\t    index;\n\t\t\t\tdo {\n\t\t\t\t\ttoken = tokens[i] + \"\";\n\t\t\t\t\tindex = checkTokenAndGetIndex(this, token);\n\t\t\t\t\twhile (index !== -1) {\n\t\t\t\t\t\tthis.splice(index, 1);\n\t\t\t\t\t\tupdated = true;\n\t\t\t\t\t\tindex = checkTokenAndGetIndex(this, token);\n\t\t\t\t\t}\n\t\t\t\t} while (++i < l);\n\n\t\t\t\tif (updated) {\n\t\t\t\t\tthis._updateClassName();\n\t\t\t\t}\n\t\t\t};\n\t\t\tclassListProto.toggle = function (token, force) {\n\t\t\t\ttoken += \"\";\n\n\t\t\t\tvar result = this.contains(token),\n\t\t\t\t    method = result ? force !== true && \"remove\" : force !== false && \"add\";\n\n\t\t\t\tif (method) {\n\t\t\t\t\tthis[method](token);\n\t\t\t\t}\n\n\t\t\t\tif (force === true || force === false) {\n\t\t\t\t\treturn force;\n\t\t\t\t} else {\n\t\t\t\t\treturn !result;\n\t\t\t\t}\n\t\t\t};\n\t\t\tclassListProto.toString = function () {\n\t\t\t\treturn this.join(\" \");\n\t\t\t};\n\n\t\t\tif (objCtr.defineProperty) {\n\t\t\t\tvar classListPropDesc = {\n\t\t\t\t\tget: classListGetter,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true\n\t\t\t\t};\n\t\t\t\ttry {\n\t\t\t\t\tobjCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t\t\t\t} catch (ex) {\n\t\t\t\t\t// IE 8 doesn't support enumerable:true\n\t\t\t\t\t// adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36\n\t\t\t\t\t// modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected\n\t\t\t\t\tif (ex.number === undefined || ex.number === -0x7FF5EC54) {\n\t\t\t\t\t\tclassListPropDesc.enumerable = false;\n\t\t\t\t\t\tobjCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (objCtr[protoProp].__defineGetter__) {\n\t\t\t\telemCtrProto.__defineGetter__(classListProp, classListGetter);\n\t\t\t}\n\t\t})(window.self);\n\t}\n\n\t// There is full or partial native classList support, so just check if we need\n\t// to normalize the add/remove and toggle APIs.\n\n\t(function () {\n\t\t\"use strict\";\n\n\t\tvar testElement = document.createElement(\"_\");\n\n\t\ttestElement.classList.add(\"c1\", \"c2\");\n\n\t\t// Polyfill for IE 10/11 and Firefox <26, where classList.add and\n\t\t// classList.remove exist but support only one argument at a time.\n\t\tif (!testElement.classList.contains(\"c2\")) {\n\t\t\tvar createMethod = function createMethod(method) {\n\t\t\t\tvar original = DOMTokenList.prototype[method];\n\n\t\t\t\tDOMTokenList.prototype[method] = function (token) {\n\t\t\t\t\tvar i,\n\t\t\t\t\t    len = arguments.length;\n\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\ttoken = arguments[i];\n\t\t\t\t\t\toriginal.call(this, token);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t\tcreateMethod('add');\n\t\t\tcreateMethod('remove');\n\t\t}\n\n\t\ttestElement.classList.toggle(\"c3\", false);\n\n\t\t// Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n\t\t// support the second argument.\n\t\tif (testElement.classList.contains(\"c3\")) {\n\t\t\tvar _toggle = DOMTokenList.prototype.toggle;\n\n\t\t\tDOMTokenList.prototype.toggle = function (token, force) {\n\t\t\t\tif (1 in arguments && !this.contains(token) === !force) {\n\t\t\t\t\treturn force;\n\t\t\t\t} else {\n\t\t\t\t\treturn _toggle.call(this, token);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\ttestElement = null;\n\t})();\n}\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition();else if (typeof define == 'function' && _typeof(define.amd) == 'object') define(definition);else this[name] = definition();\n}('domready', function () {\n\n  var fns = [],\n      _listener,\n      doc = document,\n      hack = doc.documentElement.doScroll,\n      domContentLoaded = 'DOMContentLoaded',\n      loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState);\n\n  if (!loaded) doc.addEventListener(domContentLoaded, _listener = function listener() {\n    doc.removeEventListener(domContentLoaded, _listener);\n    loaded = 1;\n    while (_listener = fns.shift()) {\n      _listener();\n    }\n  });\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn);\n  };\n});\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\n// <3 Modernizr\n// https://raw.githubusercontent.com/Modernizr/Modernizr/master/feature-detects/dom/dataset.js\n\nfunction useNative() {\n\tvar elem = document.createElement('div');\n\telem.setAttribute('data-a-b', 'c');\n\n\treturn Boolean(elem.dataset && elem.dataset.aB === 'c');\n}\n\nfunction nativeDataset(element) {\n\treturn element.dataset;\n}\n\nmodule.exports = useNative() ? nativeDataset : function (element) {\n\tvar map = {};\n\tvar attributes = element.attributes;\n\n\tfunction getter() {\n\t\treturn this.value;\n\t}\n\n\tfunction setter(name, value) {\n\t\tif (typeof value === 'undefined') {\n\t\t\tthis.removeAttribute(name);\n\t\t} else {\n\t\t\tthis.setAttribute(name, value);\n\t\t}\n\t}\n\n\tfor (var i = 0, j = attributes.length; i < j; i++) {\n\t\tvar attribute = attributes[i];\n\n\t\tif (attribute) {\n\t\t\tvar name = attribute.name;\n\n\t\t\tif (name.indexOf('data-') === 0) {\n\t\t\t\tvar prop = name.slice(5).replace(/-./g, function (u) {\n\t\t\t\t\treturn u.charAt(1).toUpperCase();\n\t\t\t\t});\n\n\t\t\t\tvar value = attribute.value;\n\n\t\t\t\tObject.defineProperty(map, prop, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: getter.bind({ value: value || '' }),\n\t\t\t\t\tset: setter.bind(element, name)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\treturn map;\n};\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\n// element-closest | CC0-1.0 | github.com/jonathantneal/closest\n\n(function (ElementProto) {\n\tif (typeof ElementProto.matches !== 'function') {\n\t\tElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector || function matches(selector) {\n\t\t\tvar element = this;\n\t\t\tvar elements = (element.document || element.ownerDocument).querySelectorAll(selector);\n\t\t\tvar index = 0;\n\n\t\t\twhile (elements[index] && elements[index] !== element) {\n\t\t\t\t++index;\n\t\t\t}\n\n\t\t\treturn Boolean(elements[index]);\n\t\t};\n\t}\n\n\tif (typeof ElementProto.closest !== 'function') {\n\t\tElementProto.closest = function closest(selector) {\n\t\t\tvar element = this;\n\n\t\t\twhile (element && element.nodeType === 1) {\n\t\t\t\tif (element.matches(selector)) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\n\t\t\t\telement = element.parentNode;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n})(window.Element.prototype);\n\n},{}],7:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function now() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? other + '' : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nmodule.exports = debounce;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],8:[function(require,module,exports){\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar assign = require('object-assign');\nvar delegate = require('../delegate');\nvar delegateAll = require('../delegateAll');\n\nvar DELEGATE_PATTERN = /^(.+):delegate\\((.+)\\)$/;\nvar SPACE = ' ';\n\nvar getListeners = function getListeners(type, handler) {\n  var match = type.match(DELEGATE_PATTERN);\n  var selector;\n  if (match) {\n    type = match[1];\n    selector = match[2];\n  }\n\n  var options;\n  if ((typeof handler === 'undefined' ? 'undefined' : _typeof(handler)) === 'object') {\n    options = {\n      capture: popKey(handler, 'capture'),\n      passive: popKey(handler, 'passive')\n    };\n  }\n\n  var listener = {\n    selector: selector,\n    delegate: (typeof handler === 'undefined' ? 'undefined' : _typeof(handler)) === 'object' ? delegateAll(handler) : selector ? delegate(selector, handler) : handler,\n    options: options\n  };\n\n  if (type.indexOf(SPACE) > -1) {\n    return type.split(SPACE).map(function (_type) {\n      return assign({ type: _type }, listener);\n    });\n  } else {\n    listener.type = type;\n    return [listener];\n  }\n};\n\nvar popKey = function popKey(obj, key) {\n  var value = obj[key];\n  delete obj[key];\n  return value;\n};\n\nmodule.exports = function behavior(events, props) {\n  var listeners = Object.keys(events).reduce(function (memo, type) {\n    var listeners = getListeners(type, events[type]);\n    return memo.concat(listeners);\n  }, []);\n\n  return assign({\n    add: function addBehavior(element) {\n      listeners.forEach(function (listener) {\n        element.addEventListener(listener.type, listener.delegate, listener.options);\n      });\n    },\n    remove: function removeBehavior(element) {\n      listeners.forEach(function (listener) {\n        element.removeEventListener(listener.type, listener.delegate, listener.options);\n      });\n    }\n  }, props);\n};\n\n},{\"../delegate\":11,\"../delegateAll\":12,\"object-assign\":8}],10:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function compose(functions) {\n  return function (e) {\n    return functions.some(function (fn) {\n      return fn.call(this, e) === false;\n    }, this);\n  };\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\n// polyfill Element.prototype.closest\nrequire('element-closest');\n\nmodule.exports = function delegate(selector, fn) {\n  return function delegation(event) {\n    var target = event.target.closest(selector);\n    if (target) {\n      return fn.call(target, event);\n    }\n  };\n};\n\n},{\"element-closest\":6}],12:[function(require,module,exports){\n'use strict';\n\nvar delegate = require('../delegate');\nvar compose = require('../compose');\n\nvar SPLAT = '*';\n\nmodule.exports = function delegateAll(selectors) {\n  var keys = Object.keys(selectors);\n\n  // XXX optimization: if there is only one handler and it applies to\n  // all elements (the \"*\" CSS selector), then just return that\n  // handler\n  if (keys.length === 1 && keys[0] === SPLAT) {\n    return selectors[SPLAT];\n  }\n\n  var delegates = keys.reduce(function (memo, selector) {\n    memo.push(delegate(selector, selectors[selector]));\n    return memo;\n  }, []);\n  return compose(delegates);\n};\n\n},{\"../compose\":10,\"../delegate\":11}],13:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function ignore(element, fn) {\n  return function ignorance(e) {\n    if (element !== e.target && !element.contains(e.target)) {\n      return fn.call(this, e);\n    }\n  };\n};\n\n},{}],14:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function once(listener, options) {\n  var wrapped = function wrappedOnce(e) {\n    e.currentTarget.removeEventListener(e.type, wrapped, options);\n    return listener.call(this, e);\n  };\n  return wrapped;\n};\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar RE_TRIM = /(^\\s+)|(\\s+$)/g;\nvar RE_SPLIT = /\\s+/;\n\nvar trim = String.prototype.trim ? function (str) {\n  return str.trim();\n} : function (str) {\n  return str.replace(RE_TRIM, '');\n};\n\nvar queryById = function queryById(id) {\n  return this.querySelector('[id=\"' + id.replace(/\"/g, '\\\\\"') + '\"]');\n};\n\nmodule.exports = function resolveIds(ids, doc) {\n  if (typeof ids !== 'string') {\n    throw new Error('Expected a string but got ' + (typeof ids === 'undefined' ? 'undefined' : _typeof(ids)));\n  }\n\n  if (!doc) {\n    doc = window.document;\n  }\n\n  var getElementById = doc.getElementById ? doc.getElementById.bind(doc) : queryById.bind(doc);\n\n  ids = trim(ids).split(RE_SPLIT);\n\n  // XXX we can short-circuit here because trimming and splitting a\n  // string of just whitespace produces an array containing a single,\n  // empty string\n  if (ids.length === 1 && ids[0] === '') {\n    return [];\n  }\n\n  return ids.map(function (id) {\n    var el = getElementById(id);\n    if (!el) {\n      throw new Error('no element with id: \"' + id + '\"');\n    }\n    return el;\n  });\n};\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar behavior = require('../utils/behavior');\nvar filter = require('array-filter');\nvar forEach = require('array-foreach');\nvar toggle = require('../utils/toggle');\nvar isElementInViewport = require('../utils/is-in-viewport');\n\nvar CLICK = require('../events').CLICK;\nvar PREFIX = require('../config').prefix;\n\n// XXX match .usa-accordion and .usa-accordion-bordered\nvar ACCORDION = '.' + PREFIX + '-accordion, .' + PREFIX + '-accordion-bordered';\nvar BUTTON = '.' + PREFIX + '-accordion-button[aria-controls]';\nvar EXPANDED = 'aria-expanded';\nvar MULTISELECTABLE = 'aria-multiselectable';\n\n/**\n * Toggle a button's \"pressed\" state, optionally providing a target\n * state.\n *\n * @param {HTMLButtonElement} button\n * @param {boolean?} expanded If no state is provided, the current\n * state will be toggled (from false to true, and vice-versa).\n * @return {boolean} the resulting state\n */\nvar toggleButton = function toggleButton(button, expanded) {\n  var accordion = button.closest(ACCORDION);\n  if (!accordion) {\n    throw new Error(BUTTON + ' is missing outer ' + ACCORDION);\n  }\n\n  expanded = toggle(button, expanded);\n  // XXX multiselectable is opt-in, to preserve legacy behavior\n  var multiselectable = accordion.getAttribute(MULTISELECTABLE) === 'true';\n\n  if (expanded && !multiselectable) {\n    forEach(getAccordionButtons(accordion), function (other) {\n      if (other !== button) {\n        toggle(other, false);\n      }\n    });\n  }\n};\n\n/**\n * @param {HTMLButtonElement} button\n * @return {boolean} true\n */\nvar showButton = function showButton(button) {\n  return toggleButton(button, true);\n};\n\n/**\n * @param {HTMLButtonElement} button\n * @return {boolean} false\n */\nvar hideButton = function hideButton(button) {\n  return toggleButton(button, false);\n};\n\n/**\n * Get an Array of button elements belonging directly to the given\n * accordion element.\n * @param {HTMLElement} accordion\n * @return {array<HTMLButtonElement>}\n */\nvar getAccordionButtons = function getAccordionButtons(accordion) {\n  return filter(accordion.querySelectorAll(BUTTON), function (button) {\n    return button.closest(ACCORDION) === accordion;\n  });\n};\n\nvar accordion = behavior(_defineProperty({}, CLICK, _defineProperty({}, BUTTON, function (event) {\n  event.preventDefault();\n  toggleButton(this);\n\n  if (this.getAttribute(EXPANDED) === 'true') {\n    // We were just expanded, but if another accordion was also just\n    // collapsed, we may no longer be in the viewport. This ensures\n    // that we are still visible, so the user isn't confused.\n    if (!isElementInViewport(this)) this.scrollIntoView();\n  }\n})), {\n  init: function init(root) {\n    forEach(root.querySelectorAll(BUTTON), function (button) {\n      var expanded = button.getAttribute(EXPANDED) === 'true';\n      toggleButton(button, expanded);\n    });\n  },\n  ACCORDION: ACCORDION,\n  BUTTON: BUTTON,\n  show: showButton,\n  hide: hideButton,\n  toggle: toggleButton,\n  getButtons: getAccordionButtons\n});\n\n/**\n * TODO: for 2.0, remove everything below this comment and export the\n * behavior directly:\n *\n * module.exports = behavior({...});\n */\nvar Accordion = function Accordion(root) {\n  this.root = root;\n  accordion.on(this.root);\n};\n\n// copy all of the behavior methods and props to Accordion\nvar assign = require('object-assign');\nassign(Accordion, accordion);\n\nAccordion.prototype.show = showButton;\nAccordion.prototype.hide = hideButton;\n\nAccordion.prototype.remove = function () {\n  accordion.off(this.root);\n};\n\nmodule.exports = Accordion;\n\n},{\"../config\":25,\"../events\":26,\"../utils/behavior\":30,\"../utils/is-in-viewport\":31,\"../utils/toggle\":35,\"array-filter\":1,\"array-foreach\":2,\"object-assign\":8}],17:[function(require,module,exports){\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar behavior = require('../utils/behavior');\nvar toggle = require('../utils/toggle');\n\nvar CLICK = require('../events').CLICK;\nvar PREFIX = require('../config').prefix;\n\nvar HEADER = '.' + PREFIX + '-banner-header';\nvar EXPANDED_CLASS = PREFIX + '-banner-header-expanded';\n\nvar toggleBanner = function toggleBanner(event) {\n  event.preventDefault();\n  this.closest(HEADER).classList.toggle(EXPANDED_CLASS);\n  return false;\n};\n\nmodule.exports = behavior(_defineProperty({}, CLICK, _defineProperty({}, HEADER + ' [aria-controls]', toggleBanner)));\n\n},{\"../config\":25,\"../events\":26,\"../utils/behavior\":30,\"../utils/toggle\":35}],18:[function(require,module,exports){\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar accordion = require('./accordion');\nvar behavior = require('../utils/behavior');\nvar debounce = require('lodash.debounce');\nvar forEach = require('array-foreach');\nvar select = require('../utils/select');\n\nvar CLICK = require('../events').CLICK;\nvar PREFIX = require('../config').prefix;\n\nvar HIDDEN = 'hidden';\nvar SCOPE = '.' + PREFIX + '-footer-big';\nvar NAV = SCOPE + ' nav';\nvar BUTTON = NAV + ' .' + PREFIX + '-footer-primary-link';\nvar LIST = NAV + ' ul';\n\nvar HIDE_MAX_WIDTH = 600;\nvar DEBOUNCE_RATE = 180;\n\nvar showPanel = function showPanel() {\n  if (window.innerWidth < HIDE_MAX_WIDTH) {\n    var list = this.closest(LIST);\n    list.classList.toggle(HIDDEN);\n\n    // NB: this *should* always succeed because the button\n    // selector is scoped to \".{prefix}-footer-big nav\"\n    var lists = list.closest(NAV).querySelectorAll('ul');\n\n    forEach(lists, function (el) {\n      if (el !== list) {\n        el.classList.add(HIDDEN);\n      }\n    });\n  }\n};\n\nvar resize = debounce(function () {\n  var hidden = window.innerWidth < HIDE_MAX_WIDTH;\n  forEach(select(LIST), function (list) {\n    list.classList.toggle(HIDDEN, hidden);\n  });\n}, DEBOUNCE_RATE);\n\nmodule.exports = behavior(_defineProperty({}, CLICK, _defineProperty({}, BUTTON, showPanel)), {\n  // export for use elsewhere\n  HIDE_MAX_WIDTH: HIDE_MAX_WIDTH,\n  DEBOUNCE_RATE: DEBOUNCE_RATE,\n\n  init: function init(target) {\n    resize();\n    window.addEventListener('resize', resize);\n  },\n\n  teardown: function teardown(target) {\n    window.removeEventListener('resize', resize);\n  }\n});\n\n},{\"../config\":25,\"../events\":26,\"../utils/behavior\":30,\"../utils/select\":32,\"./accordion\":16,\"array-foreach\":2,\"lodash.debounce\":7}],19:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  accordion: require('./accordion'),\n  banner: require('./banner'),\n  footer: require('./footer'),\n  navigation: require('./navigation'),\n  password: require('./password'),\n  search: require('./search'),\n  skipnav: require('./skipnav'),\n  validator: require('./validator')\n};\n\n},{\"./accordion\":16,\"./banner\":17,\"./footer\":18,\"./navigation\":20,\"./password\":21,\"./search\":22,\"./skipnav\":23,\"./validator\":24}],20:[function(require,module,exports){\n'use strict';\n\nvar _CLICK;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar behavior = require('../utils/behavior');\nvar forEach = require('array-foreach');\nvar select = require('../utils/select');\nvar accordion = require('./accordion');\n\nvar CLICK = require('../events').CLICK;\nvar PREFIX = require('../config').prefix;\n\nvar NAV = '.' + PREFIX + '-nav';\nvar NAV_LINKS = NAV + ' a';\nvar OPENERS = '.' + PREFIX + '-menu-btn';\nvar CLOSE_BUTTON = '.' + PREFIX + '-nav-close';\nvar OVERLAY = '.' + PREFIX + '-overlay';\nvar CLOSERS = CLOSE_BUTTON + ', .' + PREFIX + '-overlay';\nvar TOGGLES = [NAV, OVERLAY].join(', ');\n\nvar ACTIVE_CLASS = 'usa-mobile_nav-active';\nvar VISIBLE_CLASS = 'is-visible';\n\nvar isActive = function isActive() {\n  return document.body.classList.contains(ACTIVE_CLASS);\n};\n\nvar _focusTrap = function _focusTrap(trapContainer) {\n  // Find all focusable children\n  var focusableElementsString = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex=\"0\"], [contenteditable]';\n  var focusableElements = trapContainer.querySelectorAll(focusableElementsString);\n  var firstTabStop = focusableElements[0];\n  var lastTabStop = focusableElements[focusableElements.length - 1];\n\n  function trapTabKey(e) {\n    // Check for TAB key press\n    if (e.keyCode === 9) {\n\n      // SHIFT + TAB\n      if (e.shiftKey) {\n        if (document.activeElement === firstTabStop) {\n          e.preventDefault();\n          lastTabStop.focus();\n        }\n\n        // TAB\n      } else {\n        if (document.activeElement === lastTabStop) {\n          e.preventDefault();\n          firstTabStop.focus();\n        }\n      }\n    }\n\n    // ESCAPE\n    if (e.keyCode === 27) {\n      toggleNav.call(this, false);\n    }\n  }\n\n  // Focus first child\n  firstTabStop.focus();\n\n  return {\n    enable: function enable() {\n      // Listen for and trap the keyboard\n      trapContainer.addEventListener('keydown', trapTabKey);\n    },\n    release: function release() {\n      trapContainer.removeEventListener('keydown', trapTabKey);\n    }\n  };\n};\n\nvar focusTrap = void 0;\n\nvar toggleNav = function toggleNav(active) {\n  var body = document.body;\n  if (typeof active !== 'boolean') {\n    active = !isActive();\n  }\n  body.classList.toggle(ACTIVE_CLASS, active);\n\n  forEach(select(TOGGLES), function (el) {\n    el.classList.toggle(VISIBLE_CLASS, active);\n  });\n\n  if (active) {\n    focusTrap.enable();\n  } else {\n    focusTrap.release();\n  }\n\n  var closeButton = body.querySelector(CLOSE_BUTTON);\n  var menuButton = body.querySelector(OPENERS);\n\n  if (active && closeButton) {\n    // The mobile nav was just activated, so focus on the close button,\n    // which is just before all the nav elements in the tab order.\n    closeButton.focus();\n  } else if (!active && document.activeElement === closeButton && menuButton) {\n    // The mobile nav was just deactivated, and focus was on the close\n    // button, which is no longer visible. We don't want the focus to\n    // disappear into the void, so focus on the menu button if it's\n    // visible (this may have been what the user was just focused on,\n    // if they triggered the mobile nav by mistake).\n    menuButton.focus();\n  }\n\n  return active;\n};\n\nvar resize = function resize() {\n  var closer = document.body.querySelector(CLOSE_BUTTON);\n\n  if (isActive() && closer && closer.getBoundingClientRect().width === 0) {\n    // The mobile nav is active, but the close box isn't visible, which\n    // means the user's viewport has been resized so that it is no longer\n    // in mobile mode. Let's make the page state consistent by\n    // deactivating the mobile nav.\n    toggleNav.call(closer, false);\n  }\n};\n\nvar navigation = behavior(_defineProperty({}, CLICK, (_CLICK = {}, _defineProperty(_CLICK, OPENERS, toggleNav), _defineProperty(_CLICK, CLOSERS, toggleNav), _defineProperty(_CLICK, NAV_LINKS, function () {\n  // A navigation link has been clicked! We want to collapse any\n  // hierarchical navigation UI it's a part of, so that the user\n  // can focus on whatever they've just selected.\n\n  // Some navigation links are inside accordions; when they're\n  // clicked, we want to collapse those accordions.\n  var acc = this.closest(accordion.ACCORDION);\n  if (acc) {\n    accordion.getButtons(acc).forEach(function (btn) {\n      return accordion.hide(btn);\n    });\n  }\n\n  // If the mobile navigation menu is active, we want to hide it.\n  if (isActive()) {\n    toggleNav.call(this, false);\n  }\n}), _CLICK)), {\n  init: function init() {\n    var trapContainer = document.querySelector(NAV);\n\n    if (trapContainer) {\n      focusTrap = _focusTrap(trapContainer);\n    }\n\n    resize();\n    window.addEventListener('resize', resize, false);\n  },\n  teardown: function teardown() {\n    window.removeEventListener('resize', resize, false);\n  }\n});\n\n/**\n * TODO for 2.0, remove this statement and export `navigation` directly:\n *\n * module.exports = behavior({...});\n */\nvar assign = require('object-assign');\nmodule.exports = assign(function (el) {\n  return navigation.on(el);\n}, navigation);\n\n},{\"../config\":25,\"../events\":26,\"../utils/behavior\":30,\"../utils/select\":32,\"./accordion\":16,\"array-foreach\":2,\"object-assign\":8}],21:[function(require,module,exports){\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar behavior = require('../utils/behavior');\nvar toggleFormInput = require('../utils/toggle-form-input');\n\nvar CLICK = require('../events').CLICK;\nvar PREFIX = require('../config').prefix;\n\nvar LINK = '.' + PREFIX + '-show_password, .' + PREFIX + '-show_multipassword';\n\nvar toggle = function toggle(event) {\n  event.preventDefault();\n  toggleFormInput(this);\n};\n\nmodule.exports = behavior(_defineProperty({}, CLICK, _defineProperty({}, LINK, toggle)));\n\n},{\"../config\":25,\"../events\":26,\"../utils/behavior\":30,\"../utils/toggle-form-input\":34}],22:[function(require,module,exports){\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar behavior = require('../utils/behavior');\nvar forEach = require('array-foreach');\nvar ignore = require('receptor/ignore');\nvar select = require('../utils/select');\n\nvar CLICK = require('../events').CLICK;\nvar PREFIX = require('../config').prefix;\n\nvar BUTTON = '.js-search-button';\nvar FORM = '.js-search-form';\nvar INPUT = '[type=search]';\nvar CONTEXT = 'header'; // XXX\nvar VISUALLY_HIDDEN = PREFIX + '-sr-only';\n\nvar lastButton = void 0;\n\nvar showSearch = function showSearch(event) {\n  toggleSearch(this, true);\n  lastButton = this;\n};\n\nvar hideSearch = function hideSearch(event) {\n  toggleSearch(this, false);\n  lastButton = undefined;\n};\n\nvar getForm = function getForm(button) {\n  var context = button.closest(CONTEXT);\n  return context ? context.querySelector(FORM) : document.querySelector(FORM);\n};\n\nvar toggleSearch = function toggleSearch(button, active) {\n  var form = getForm(button);\n  if (!form) {\n    throw new Error('No ' + FORM + ' found for search toggle in ' + CONTEXT + '!');\n  }\n\n  button.hidden = active;\n  form.classList.toggle(VISUALLY_HIDDEN, !active);\n\n  if (active) {\n    var input = form.querySelector(INPUT);\n    if (input) {\n      input.focus();\n    }\n    // when the user clicks _outside_ of the form w/ignore(): hide the\n    // search, then remove the listener\n    var listener = ignore(form, function (e) {\n      if (lastButton) {\n        hideSearch.call(lastButton);\n      }\n      document.body.removeEventListener(CLICK, listener);\n    });\n\n    // Normally we would just run this code without a timeout, but\n    // IE11 and Edge will actually call the listener *immediately* because\n    // they are currently handling this exact type of event, so we'll\n    // make sure the browser is done handling the current click event,\n    // if any, before we attach the listener.\n    setTimeout(function () {\n      document.body.addEventListener(CLICK, listener);\n    }, 0);\n  }\n};\n\nvar search = behavior(_defineProperty({}, CLICK, _defineProperty({}, BUTTON, showSearch)), {\n  init: function init(target) {\n    forEach(select(BUTTON, target), function (button) {\n      toggleSearch(button, false);\n    });\n  },\n  teardown: function teardown(target) {\n    // forget the last button clicked\n    lastButton = undefined;\n  }\n});\n\n/**\n * TODO for 2.0, remove this statement and export `navigation` directly:\n *\n * module.exports = behavior({...});\n */\nvar assign = require('object-assign');\nmodule.exports = assign(function (el) {\n  return search.on(el);\n}, search);\n\n},{\"../config\":25,\"../events\":26,\"../utils/behavior\":30,\"../utils/select\":32,\"array-foreach\":2,\"object-assign\":8,\"receptor/ignore\":13}],23:[function(require,module,exports){\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar behavior = require('../utils/behavior');\nvar once = require('receptor/once');\n\nvar CLICK = require('../events').CLICK;\nvar PREFIX = require('../config').prefix;\nvar LINK = '.' + PREFIX + '-skipnav[href^=\"#\"], .' + PREFIX + '-footer-return-to-top [href^=\"#\"]';\nvar MAINCONTENT = 'main-content';\n\nvar setTabindex = function setTabindex(event) {\n  // NB: we know because of the selector we're delegating to below that the\n  // href already begins with '#'\n  var id = this.getAttribute('href');\n  var target = document.getElementById(id === '#' ? MAINCONTENT : id.slice(1));\n\n  if (target) {\n    target.style.outline = '0';\n    target.setAttribute('tabindex', 0);\n    target.focus();\n    target.addEventListener('blur', once(function (event) {\n      target.setAttribute('tabindex', -1);\n    }));\n  } else {\n    // throw an error?\n  }\n};\n\nmodule.exports = behavior(_defineProperty({}, CLICK, _defineProperty({}, LINK, setTabindex)));\n\n},{\"../config\":25,\"../events\":26,\"../utils/behavior\":30,\"receptor/once\":14}],24:[function(require,module,exports){\n'use strict';\n\nvar behavior = require('../utils/behavior');\nvar validate = require('../utils/validate-input');\nvar debounce = require('lodash.debounce');\n\nvar change = function change(event) {\n  return validate(this);\n};\n\nvar validator = behavior({\n  'keyup change': {\n    'input[data-validation-element]': change\n  }\n});\n\n/**\n * TODO for 2.0, remove this statement and export `navigation` directly:\n *\n * module.exports = behavior({...});\n */\nvar assign = require('object-assign');\nmodule.exports = assign(function (el) {\n  return validator.on(el);\n}, validator);\n\n},{\"../utils/behavior\":30,\"../utils/validate-input\":36,\"lodash.debounce\":7,\"object-assign\":8}],25:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  prefix: 'usa'\n};\n\n},{}],26:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  // This used to be conditionally dependent on whether the\n  // browser supported touch events; if it did, `CLICK` was set to\n  // `touchstart`.  However, this had downsides:\n  //\n  // * It pre-empted mobile browsers' default behavior of detecting\n  //   whether a touch turned into a scroll, thereby preventing\n  //   users from using some of our components as scroll surfaces.\n  //\n  // * Some devices, such as the Microsoft Surface Pro, support *both*\n  //   touch and clicks. This meant the conditional effectively dropped\n  //   support for the user's mouse, frustrating users who preferred\n  //   it on those systems.\n  CLICK: 'click'\n};\n\n},{}],27:[function(require,module,exports){\n'use strict';\n\nvar elproto = window.HTMLElement.prototype;\nvar HIDDEN = 'hidden';\n\nif (!(HIDDEN in elproto)) {\n  Object.defineProperty(elproto, HIDDEN, {\n    get: function get() {\n      return this.hasAttribute(HIDDEN);\n    },\n    set: function set(value) {\n      if (value) {\n        this.setAttribute(HIDDEN, '');\n      } else {\n        this.removeAttribute(HIDDEN);\n      }\n    }\n  });\n}\n\n},{}],28:[function(require,module,exports){\n'use strict';\n// polyfills HTMLElement.prototype.classList and DOMTokenList\n\nrequire('classlist-polyfill');\n// polyfills HTMLElement.prototype.hidden\nrequire('./element-hidden');\n\n},{\"./element-hidden\":27,\"classlist-polyfill\":3}],29:[function(require,module,exports){\n'use strict';\n\nvar domready = require('domready');\n\n/**\n * The 'polyfills' define key ECMAScript 5 methods that may be missing from\n * older browsers, so must be loaded first.\n */\nrequire('./polyfills');\n\nvar uswds = require('./config');\n\nvar components = require('./components');\nuswds.components = components;\n\ndomready(function () {\n  var target = document.body;\n  for (var name in components) {\n    var behavior = components[name];\n    behavior.on(target);\n  }\n});\n\nmodule.exports = uswds;\n\n},{\"./components\":19,\"./config\":25,\"./polyfills\":28,\"domready\":4}],30:[function(require,module,exports){\n'use strict';\n\nvar assign = require('object-assign');\nvar forEach = require('array-foreach');\nvar Behavior = require('receptor/behavior');\n\nvar sequence = function sequence() {\n  var seq = [].slice.call(arguments);\n  return function (target) {\n    var _this = this;\n\n    if (!target) {\n      target = document.body;\n    }\n    forEach(seq, function (method) {\n      if (typeof _this[method] === 'function') {\n        _this[method].call(_this, target);\n      }\n    });\n  };\n};\n\n/**\n * @name behavior\n * @param {object} events\n * @param {object?} props\n * @return {receptor.behavior}\n */\nmodule.exports = function (events, props) {\n  return Behavior(events, assign({\n    on: sequence('init', 'add'),\n    off: sequence('teardown', 'remove')\n  }, props));\n};\n\n},{\"array-foreach\":2,\"object-assign\":8,\"receptor/behavior\":9}],31:[function(require,module,exports){\n\"use strict\";\n\n// https://stackoverflow.com/a/7557433\nfunction isElementInViewport(el) {\n  var win = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;\n  var docEl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.documentElement;\n\n  var rect = el.getBoundingClientRect();\n\n  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (win.innerHeight || docEl.clientHeight) && rect.right <= (win.innerWidth || docEl.clientWidth);\n}\n\nmodule.exports = isElementInViewport;\n\n},{}],32:[function(require,module,exports){\n'use strict';\n\n/**\n * @name isElement\n * @desc returns whether or not the given argument is a DOM element.\n * @param {any} value\n * @return {boolean}\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar isElement = function isElement(value) {\n  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.nodeType === 1;\n};\n\n/**\n * @name select\n * @desc selects elements from the DOM by class selector or ID selector.\n * @param {string} selector - The selector to traverse the DOM with.\n * @param {Document|HTMLElement?} context - The context to traverse the DOM\n *   in. If not provided, it defaults to the document.\n * @return {HTMLElement[]} - An array of DOM nodes or an empty array.\n */\nmodule.exports = function select(selector, context) {\n\n  if (typeof selector !== 'string') {\n    return [];\n  }\n\n  if (!context || !isElement(context)) {\n    context = window.document;\n  }\n\n  var selection = context.querySelectorAll(selector);\n  return Array.prototype.slice.call(selection);\n};\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\n/**\n * Flips given INPUT elements between masked (hiding the field value) and unmasked\n * @param {Array.HTMLElement} fields - An array of INPUT elements\n * @param {Boolean} mask - Whether the mask should be applied, hiding the field value\n */\nmodule.exports = function (field, mask) {\n  field.setAttribute('autocapitalize', 'off');\n  field.setAttribute('autocorrect', 'off');\n  field.setAttribute('type', mask ? 'password' : 'text');\n};\n\n},{}],34:[function(require,module,exports){\n'use strict';\n\nvar forEach = require('array-foreach');\nvar resolveIdRefs = require('resolve-id-refs');\nvar select = require('./select');\nvar toggleFieldMask = require('./toggle-field-mask');\n\nvar CONTROLS = 'aria-controls';\nvar PRESSED = 'aria-pressed';\nvar SHOW_ATTR = 'data-show-text';\nvar HIDE_ATTR = 'data-hide-text';\n\n/**\n * Replace the word \"Show\" (or \"show\") with \"Hide\" (or \"hide\") in a string.\n * @param {string} showText\n * @return {strong} hideText\n */\nvar getHideText = function getHideText(showText) {\n  return showText.replace(/\\bShow\\b/i, function (show) {\n    return ('S' === show[0] ? 'H' : 'h') + 'ide';\n  });\n};\n\n/**\n * Component that decorates an HTML element with the ability to toggle the\n * masked state of an input field (like a password) when clicked.\n * The ids of the fields to be masked will be pulled directly from the button's\n * `aria-controls` attribute.\n *\n * @param  {HTMLElement} el    Parent element containing the fields to be masked\n * @return {boolean}\n */\nmodule.exports = function (el) {\n  // this is the *target* state:\n  // * if the element has the attr and it's !== \"true\", pressed is true\n  // * otherwise, pressed is false\n  var pressed = el.hasAttribute(PRESSED) && el.getAttribute(PRESSED) !== 'true';\n\n  var fields = resolveIdRefs(el.getAttribute(CONTROLS));\n  forEach(fields, function (field) {\n    return toggleFieldMask(field, pressed);\n  });\n\n  if (!el.hasAttribute(SHOW_ATTR)) {\n    el.setAttribute(SHOW_ATTR, el.textContent);\n  }\n\n  var showText = el.getAttribute(SHOW_ATTR);\n  var hideText = el.getAttribute(HIDE_ATTR) || getHideText(showText);\n\n  el.textContent = pressed ? showText : hideText;\n  el.setAttribute(PRESSED, pressed);\n  return pressed;\n};\n\n},{\"./select\":32,\"./toggle-field-mask\":33,\"array-foreach\":2,\"resolve-id-refs\":15}],35:[function(require,module,exports){\n'use strict';\n\nvar EXPANDED = 'aria-expanded';\nvar CONTROLS = 'aria-controls';\nvar HIDDEN = 'aria-hidden';\n\nmodule.exports = function (button, expanded) {\n\n  if (typeof expanded !== 'boolean') {\n    expanded = button.getAttribute(EXPANDED) === 'false';\n  }\n  button.setAttribute(EXPANDED, expanded);\n\n  var id = button.getAttribute(CONTROLS);\n  var controls = document.getElementById(id);\n  if (!controls) {\n    throw new Error('No toggle target found with id: \"' + id + '\"');\n  }\n\n  controls.setAttribute(HIDDEN, !expanded);\n  return expanded;\n};\n\n},{}],36:[function(require,module,exports){\n'use strict';\n\nvar dataset = require('elem-dataset');\n\nvar PREFIX = require('../config').prefix;\nvar CHECKED = 'aria-checked';\nvar CHECKED_CLASS = PREFIX + '-checklist-checked';\n\nmodule.exports = function validate(el) {\n  var data = dataset(el);\n  var id = data.validationElement;\n  var checkList = id.charAt(0) === '#' ? document.querySelector(id) : document.getElementById(id);\n\n  if (!checkList) {\n    throw new Error('No validation element found with id: \"' + id + '\"');\n  }\n\n  for (var key in data) {\n    if (key.startsWith('validate')) {\n      var validatorName = key.substr('validate'.length).toLowerCase();\n      var validatorPattern = new RegExp(data[key]);\n      var validatorSelector = '[data-validator=\"' + validatorName + '\"]';\n      var validatorCheckbox = checkList.querySelector(validatorSelector);\n      if (!validatorCheckbox) {\n        throw new Error('No validator checkbox found for: \"' + validatorName + '\"');\n      }\n\n      var checked = validatorPattern.test(el.value);\n      validatorCheckbox.classList.toggle(CHECKED_CLASS, checked);\n      validatorCheckbox.setAttribute(CHECKED, checked);\n    }\n  }\n};\n\n},{\"../config\":25,\"elem-dataset\":5}]},{},[29])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}